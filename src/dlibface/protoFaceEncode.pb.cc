// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoFaceEncode.proto

#include "dlibface/protoFaceEncode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class protoFaceEncodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<protoFaceEncode>
      _instance;
} _protoFaceEncode_default_instance_;
class protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse>
      _instance;
} _protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse_default_instance_;
class protoFaceEncodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<protoFaceEncodes>
      _instance;
} _protoFaceEncodes_default_instance_;
namespace protobuf_protoFaceEncode_2eproto {
void InitDefaultsprotoFaceEncodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_protoFaceEncode_default_instance_;
    new (ptr) ::protoFaceEncode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protoFaceEncode::InitAsDefaultInstance();
}

void InitDefaultsprotoFaceEncode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsprotoFaceEncodeImpl);
}

void InitDefaultsprotoFaceEncodes_ProtoFaceEncodesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protoFaceEncode_2eproto::InitDefaultsprotoFaceEncode();
  {
    void* ptr = &::_protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse_default_instance_;
    new (ptr) ::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse();
  }
  ::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsprotoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsprotoFaceEncodes_ProtoFaceEncodesEntry_DoNotUseImpl);
}

void InitDefaultsprotoFaceEncodesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protoFaceEncode_2eproto::InitDefaultsprotoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse();
  {
    void* ptr = &::_protoFaceEncodes_default_instance_;
    new (ptr) ::protoFaceEncodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protoFaceEncodes::InitAsDefaultInstance();
}

void InitDefaultsprotoFaceEncodes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsprotoFaceEncodesImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncode, encode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protoFaceEncodes, proto_face_encodes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protoFaceEncode)},
  { 6, 13, sizeof(::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse)},
  { 15, -1, sizeof(::protoFaceEncodes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_protoFaceEncode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_protoFaceEncodes_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protoFaceEncode.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025protoFaceEncode.proto\"!\n\017protoFaceEnco"
      "de\022\016\n\006encode\030\001 \003(\002\"\242\001\n\020protoFaceEncodes\022"
      "C\n\022proto_face_encodes\030\001 \003(\0132\'.protoFaceE"
      "ncodes.ProtoFaceEncodesEntry\032I\n\025ProtoFac"
      "eEncodesEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001("
      "\0132\020.protoFaceEncode:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protoFaceEncode.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protoFaceEncode_2eproto

// ===================================================================

void protoFaceEncode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int protoFaceEncode::kEncodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

protoFaceEncode::protoFaceEncode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protoFaceEncode_2eproto::InitDefaultsprotoFaceEncode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protoFaceEncode)
}
protoFaceEncode::protoFaceEncode(const protoFaceEncode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      encode_(from.encode_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protoFaceEncode)
}

void protoFaceEncode::SharedCtor() {
  _cached_size_ = 0;
}

protoFaceEncode::~protoFaceEncode() {
  // @@protoc_insertion_point(destructor:protoFaceEncode)
  SharedDtor();
}

void protoFaceEncode::SharedDtor() {
}

void protoFaceEncode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* protoFaceEncode::descriptor() {
  ::protobuf_protoFaceEncode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protoFaceEncode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const protoFaceEncode& protoFaceEncode::default_instance() {
  ::protobuf_protoFaceEncode_2eproto::InitDefaultsprotoFaceEncode();
  return *internal_default_instance();
}

protoFaceEncode* protoFaceEncode::New(::google::protobuf::Arena* arena) const {
  protoFaceEncode* n = new protoFaceEncode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void protoFaceEncode::Clear() {
// @@protoc_insertion_point(message_clear_start:protoFaceEncode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encode_.Clear();
  _internal_metadata_.Clear();
}

bool protoFaceEncode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protoFaceEncode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float encode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_encode())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_encode())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protoFaceEncode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protoFaceEncode)
  return false;
#undef DO_
}

void protoFaceEncode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protoFaceEncode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float encode = 1;
  if (this->encode_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _encode_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->encode().data(), this->encode_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protoFaceEncode)
}

::google::protobuf::uint8* protoFaceEncode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protoFaceEncode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float encode = 1;
  if (this->encode_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _encode_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->encode_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoFaceEncode)
  return target;
}

size_t protoFaceEncode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoFaceEncode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float encode = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->encode_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _encode_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void protoFaceEncode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protoFaceEncode)
  GOOGLE_DCHECK_NE(&from, this);
  const protoFaceEncode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const protoFaceEncode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protoFaceEncode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protoFaceEncode)
    MergeFrom(*source);
  }
}

void protoFaceEncode::MergeFrom(const protoFaceEncode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoFaceEncode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encode_.MergeFrom(from.encode_);
}

void protoFaceEncode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protoFaceEncode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protoFaceEncode::CopyFrom(const protoFaceEncode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoFaceEncode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protoFaceEncode::IsInitialized() const {
  return true;
}

void protoFaceEncode::Swap(protoFaceEncode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void protoFaceEncode::InternalSwap(protoFaceEncode* other) {
  using std::swap;
  encode_.InternalSwap(&other->encode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata protoFaceEncode::GetMetadata() const {
  protobuf_protoFaceEncode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protoFaceEncode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse() {}
protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::MergeFrom(const protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protoFaceEncode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protoFaceEncode_2eproto::file_level_metadata[1];
}
void protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void protoFaceEncodes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int protoFaceEncodes::kProtoFaceEncodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

protoFaceEncodes::protoFaceEncodes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protoFaceEncode_2eproto::InitDefaultsprotoFaceEncodes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protoFaceEncodes)
}
protoFaceEncodes::protoFaceEncodes(const protoFaceEncodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proto_face_encodes_.MergeFrom(from.proto_face_encodes_);
  // @@protoc_insertion_point(copy_constructor:protoFaceEncodes)
}

void protoFaceEncodes::SharedCtor() {
  _cached_size_ = 0;
}

protoFaceEncodes::~protoFaceEncodes() {
  // @@protoc_insertion_point(destructor:protoFaceEncodes)
  SharedDtor();
}

void protoFaceEncodes::SharedDtor() {
}

void protoFaceEncodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* protoFaceEncodes::descriptor() {
  ::protobuf_protoFaceEncode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protoFaceEncode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const protoFaceEncodes& protoFaceEncodes::default_instance() {
  ::protobuf_protoFaceEncode_2eproto::InitDefaultsprotoFaceEncodes();
  return *internal_default_instance();
}

protoFaceEncodes* protoFaceEncodes::New(::google::protobuf::Arena* arena) const {
  protoFaceEncodes* n = new protoFaceEncodes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void protoFaceEncodes::Clear() {
// @@protoc_insertion_point(message_clear_start:protoFaceEncodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_face_encodes_.Clear();
  _internal_metadata_.Clear();
}

bool protoFaceEncodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protoFaceEncodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .protoFaceEncode> proto_face_encodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse,
              ::std::string, ::protoFaceEncode,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::protoFaceEncode > > parser(&proto_face_encodes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protoFaceEncodes.ProtoFaceEncodesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protoFaceEncodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protoFaceEncodes)
  return false;
#undef DO_
}

void protoFaceEncodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protoFaceEncodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .protoFaceEncode> proto_face_encodes = 1;
  if (!this->proto_face_encodes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protoFaceEncodes.ProtoFaceEncodesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->proto_face_encodes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proto_face_encodes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::protoFaceEncode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_iterator
          it = this->proto_face_encodes().begin();
          it != this->proto_face_encodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proto_face_encodes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_iterator
          it = this->proto_face_encodes().begin();
          it != this->proto_face_encodes().end(); ++it) {
        entry.reset(proto_face_encodes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protoFaceEncodes)
}

::google::protobuf::uint8* protoFaceEncodes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protoFaceEncodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .protoFaceEncode> proto_face_encodes = 1;
  if (!this->proto_face_encodes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "protoFaceEncodes.ProtoFaceEncodesEntry.key");
      }
    };

    if (deterministic &&
        this->proto_face_encodes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->proto_face_encodes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::protoFaceEncode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_iterator
          it = this->proto_face_encodes().begin();
          it != this->proto_face_encodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(proto_face_encodes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_iterator
          it = this->proto_face_encodes().begin();
          it != this->proto_face_encodes().end(); ++it) {
        entry.reset(proto_face_encodes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoFaceEncodes)
  return target;
}

size_t protoFaceEncodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoFaceEncodes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .protoFaceEncode> proto_face_encodes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_face_encodes_size());
  {
    ::google::protobuf::scoped_ptr<protoFaceEncodes_ProtoFaceEncodesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::protoFaceEncode >::const_iterator
        it = this->proto_face_encodes().begin();
        it != this->proto_face_encodes().end(); ++it) {
      entry.reset(proto_face_encodes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void protoFaceEncodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protoFaceEncodes)
  GOOGLE_DCHECK_NE(&from, this);
  const protoFaceEncodes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const protoFaceEncodes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protoFaceEncodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protoFaceEncodes)
    MergeFrom(*source);
  }
}

void protoFaceEncodes::MergeFrom(const protoFaceEncodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoFaceEncodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proto_face_encodes_.MergeFrom(from.proto_face_encodes_);
}

void protoFaceEncodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protoFaceEncodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protoFaceEncodes::CopyFrom(const protoFaceEncodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoFaceEncodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protoFaceEncodes::IsInitialized() const {
  return true;
}

void protoFaceEncodes::Swap(protoFaceEncodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void protoFaceEncodes::InternalSwap(protoFaceEncodes* other) {
  using std::swap;
  proto_face_encodes_.Swap(&other->proto_face_encodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata protoFaceEncodes::GetMetadata() const {
  protobuf_protoFaceEncode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protoFaceEncode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
